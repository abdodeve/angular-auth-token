{"version":3,"sources":["ng://auth-token/auth-token/auth-interceptor.ts","ng://auth-token/auth-token/auth-token.module.ts"],"names":["AuthInterceptor","prototype","intercept","request","next","_this","this","handle","pipe","catchError","error","HttpErrorResponse","status","token","clone","headers","set","refreshTokenAndRetry","console","warn","http","post","refreshEndpoint","switchMap","response","log","localStorage","setItem","Injectable","HttpClient","Inject","args","environment","getItem","refreshToken","AuthTokenModule","NgModule","declarations","imports","exports","providers","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"0YAsBA,IAAAA,GAkBEA,EAAAC,UAAAC,UAAA,SACEC,EACAC,GAFF,IAAAC,EAAAC,KAIE,OAAOF,EAAKG,OAAOJ,GAASK,KAC1BC,EAAAA,WAAU,SAACC,GACT,GAAIA,aAAiBC,EAAAA,mBAAsC,MAAjBD,EAAME,OAC9C,OAAIP,EAAKQ,OAEPV,EAAUA,EAAQW,MAAM,CACtBC,QAASZ,EAAQY,QAAQC,IACvB,gBACA,UAAYX,EAAKQ,SAIdR,EAAKY,qBAAqBd,EAASC,KAE1Cc,QAAQC,KAAK,wBAAyB,UAAYd,EAAKQ,OAChDT,EAAKG,OAAOJ,QAc7BH,EAAAC,UAAAgB,qBAAA,SAAqBd,EAA2BC,GAC9C,OAAOE,KAAKc,KAAKC,KAAKf,KAAKgB,gBAAiB,IAAId,KAC9Ce,EAAAA,UAAS,SAAEC,GAUT,OATAN,QAAQO,IAAI,WAAYD,GACxBE,aAAaC,QAAQ,eAAgBH,EAAS,iBAC9CE,aAAaC,QAAQ,gBAAiBH,EAAS,kBAC/CrB,EAAUA,EAAQW,MAAM,CACtBC,QAASZ,EAAQY,QAAQC,IACvB,gBACA,UAAYQ,EAAS,oBAGlBpB,EAAKG,OAAOJ,2BA/D1ByB,EAAAA,sDAJQC,EAAAA,8CAaJC,EAAAA,OAAMC,KAAA,CAAC,oBA0DZ/B,GA5DE,SAAAA,EACUoB,EAERY,GAFQ1B,KAAAc,KAAAA,EAIRd,KAAK0B,YAAcA,EACnB1B,KAAKgB,gBAAkBhB,KAAK0B,YAAY,yBACxC1B,KAAKO,MAAQa,aAAaO,QAAQ,gBAClC3B,KAAK4B,aAAeR,aAAaO,QAAQ,iBCrC7C,IAAAE,uBAICC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,GACdC,QAAS,GACTC,QAAS,GACTC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,SAAU3C,EACV4C,OAAO,QAIiBT,GAZ9B,SAAAA","sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\r\nimport {\r\n  tap,\r\n  mergeMap,\r\n  flatMap,\r\n  map,\r\n  switchMap,\r\n  catchError\r\n} from \"rxjs/operators\";\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpResponse,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { Observable, from, throwError, BehaviorSubject } from \"rxjs\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\n// import { environment } from \"./../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  private environment;\r\n  private refreshEndpoint: string;\r\n  private token;\r\n  private refreshToken;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(\"environment\")\r\n    environment\r\n  ) {\r\n    this.environment = environment;\r\n    this.refreshEndpoint = this.environment[\"refreshtoken-endpoint\"];\r\n    this.token = localStorage.getItem(\"access-token\");\r\n    this.refreshToken = localStorage.getItem(\"refresh-token\");\r\n  }\r\n  //function which will be called for all http calls\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      catchError(error => {\r\n        if (error instanceof HttpErrorResponse && error.status === 401) {\r\n          if (this.token) {\r\n            // Add token to header\r\n            request = request.clone({\r\n              headers: request.headers.set(\r\n                \"Authorization\",\r\n                \"Bearer \" + this.token\r\n              )\r\n            });\r\n            // Refresh Token AND Retry\r\n            return this.refreshTokenAndRetry(request, next);\r\n          } else {\r\n            console.warn(\"Token doesn't exist !\", \"Bearer \" + this.token);\r\n            return next.handle(request);\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * refreshToken\r\n   * Refresh the token after expiration\r\n   * @param token\r\n   * @param request\r\n   * @param next\r\n   */\r\n  refreshTokenAndRetry(request: HttpRequest<any>, next: HttpHandler) {\r\n    return this.http.post(this.refreshEndpoint, {}).pipe(\r\n      switchMap((response: any) => {\r\n        console.log(\"response\", response);\r\n        localStorage.setItem(\"access-token\", response[\"access-token\"]);\r\n        localStorage.setItem(\"refresh-token\", response[\"refresh-token\"]);\r\n        request = request.clone({\r\n          headers: request.headers.set(\r\n            \"Authorization\",\r\n            \"Bearer \" + response[\"refresh-token\"]\r\n          )\r\n        });\r\n        return next.handle(request);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { AuthInterceptor } from \"./auth-interceptor\";\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: [],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AuthTokenModule {}\r\n"]}